---
// src/components/Pattern.astro

import fs from 'node:fs/promises';
import path from 'node:path';
import { Code } from 'astro:components';

import CopyButton from './CopyButton.astro';

interface Props {
  patternName: string;
}

const { patternName } = Astro.props;
const id = patternName.toLowerCase().replace(/\s+/g, '-');

// Construct an absolute path to the specific pattern's directory
const patternPath = path.resolve(process.cwd(), 'src/patterns', patternName);

// Use fs.readFile to dynamically read the content of each file.
// This is the correct method for dynamic paths based on props.
const [htmlCode, cssCode, jsCode, notesText, baselineKey] = await Promise.all([
  fs.readFile(path.join(patternPath, 'markup.html'), 'utf-8'),
  fs.readFile(path.join(patternPath, 'styles.css'), 'utf-8'),
  fs.readFile(path.join(patternPath, 'script.js'), 'utf-8'),
  fs.readFile(path.join(patternPath, 'notes.txt'), 'utf-8'),
  fs.readFile(path.join(patternPath, 'baseline.txt'), 'utf-8'),
]);
---

<section class="pattern-showcase" id={id}>
  <h2>{patternName}</h2>

  <h3>Preview</h3>
  <div class="preview-box" set:html={htmlCode}></div>
  <style set:html={cssCode}></style>
  <script set:html={jsCode}></script>

  <h3>Code</h3>
  <div class="code-tabs">
    <div class="tab-buttons">
      <button class="tab-button active" data-tab="html">HTML</button>
      <button class="tab-button" data-tab="css">CSS</button>
      {jsCode && <button class="tab-button" data-tab="js">JavaScript</button>}
    </div>
    <div id="html" class="code-block tab-pane active">
      <Code lang="html" code={htmlCode} />
      <CopyButton />
    </div>
    <div id="css" class="code-block tab-pane">
      <Code lang="css" code={cssCode} />
      <CopyButton />
    </div>
    {jsCode &&
      <div id="js" class="code-block tab-pane">
        <Code lang="js" code={jsCode} />
        <CopyButton />
      </div>
    }
  </div>

  { baselineKey && (
    <h3>Browser Support</h3>
    <div class="baseline-widget">
      {/* Use .trim() to remove any potential whitespace from the file */}
      <baseline-status featureId={baselineKey.trim()} display="wide"
      ></baseline-status>
    </div>
  )}

  <h3>Notes</h3>
  <p class="notes">{notesText}</p>
</section>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const tabContainers = document.querySelectorAll('.code-tabs');

    tabContainers.forEach(container => {
      const tabButtons = container.querySelectorAll('.tab-button');
      const tabPanes = container.querySelectorAll('.tab-pane');

      tabButtons.forEach(button => {
        button.addEventListener('click', () => {
          const tab = (button as HTMLElement).dataset.tab;

          tabButtons.forEach(btn => btn.classList.remove('active'));
          button.classList.add('active');

          tabPanes.forEach(pane => {
            if ((pane as HTMLElement).id === tab) {
              pane.classList.add('active');
            } else {
              pane.classList.remove('active');
            }
          });
        });
      });
    });
  });
</script>

<style>
  .pattern-showcase {
    border-top: 2px solid var(--border-color);
    padding-top: 2rem;
    margin-bottom: 4rem;
    max-width: 1000px;
  }
  .preview-box {
    border: 1px solid var(--border-color);
    border-radius: 8px;
    overflow: hidden;
    margin-bottom: 1.5rem;
  }
  .preview-box {
    background-color: var(--bg-color);
    padding: 1.5rem;
  }
  .code-block {
    position: relative;
    margin-bottom: 1rem;
  }
  .tab-buttons {
    margin-bottom: -1rem;
  }
  .tab-button {
    padding: 0.5rem 1rem;
    border: 1px solid var(--border-color);
    border-bottom: none;
    background: transparent;
    cursor: pointer;
    border-radius: 4px 4px 0 0;
    margin-right: 0.25rem;
  }
  .tab-button.active {
    background: var(--code-bg);
    border-bottom: 1px solid var(--code-bg);
  }
  .tab-pane {
    display: none;
  }
  .tab-pane.active {
    display: block;
  }
  .notes {
    white-space: pre-wrap;
    background: var(--code-bg);
    padding: 1rem;
    border-radius: 8px;
    line-height: 1.6;
  }
</style>
